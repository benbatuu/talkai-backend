
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PackageFeatureScalarFieldEnum = {
  id: 'id',
  feature: 'feature',
  available: 'available',
  packageId: 'packageId'
};

exports.Prisma.PackagesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  duration: 'duration',
  popular: 'popular',
  highlightColor: 'highlightColor',
  savings: 'savings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceScalarFieldEnum = {
  id: 'id',
  currency: 'currency',
  amount: 'amount',
  packageId: 'packageId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  packageId: 'packageId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  lastPaymentStatus: 'lastPaymentStatus',
  stripeCustomerId: 'stripeCustomerId',
  stripePaymentId: 'stripePaymentId',
  stripePriceId: 'stripePriceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  language: 'language',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  message: 'message',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningProgressScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  languageID: 'languageID',
  progress: 'progress',
  createdat: 'createdat',
  updatedat: 'updatedat'
};

exports.Prisma.LanguagesScalarFieldEnum = {
  id: 'id',
  flag: 'flag',
  name: 'name',
  code: 'code'
};

exports.Prisma.EntranceScalarFieldEnum = {
  id: 'id',
  type: 'type',
  useragent: 'useragent',
  ipaddress: 'ipaddress',
  userid: 'userid',
  createdat: 'createdat'
};

exports.Prisma.ApiclientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  key: 'key',
  secret: 'secret',
  type: 'type',
  createdat: 'createdat',
  createdby: 'createdby',
  updatedat: 'updatedat',
  updatedby: 'updatedby',
  isactive: 'isactive'
};

exports.Prisma.RefreshtokenScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  token: 'token',
  createdat: 'createdat',
  updatedat: 'updatedat',
  expiresat: 'expiresat'
};

exports.Prisma.RevokedtokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  date: 'date'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdby: 'createdby',
  createdat: 'createdat',
  updatedby: 'updatedby',
  updatedat: 'updatedat',
  issystemrole: 'issystemrole'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  touserid: 'touserid',
  message: 'message',
  url: 'url',
  createdby: 'createdby',
  createdat: 'createdat',
  readedat: 'readedat'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  group: 'group',
  description: 'description',
  createdby: 'createdby',
  createdat: 'createdat',
  updatedby: 'updatedby',
  updatedat: 'updatedat'
};

exports.Prisma.RolepermissionScalarFieldEnum = {
  id: 'id',
  roleid: 'roleid',
  permissionid: 'permissionid',
  createdat: 'createdat',
  createdby: 'createdby',
  updatedby: 'updatedby',
  updatedat: 'updatedat'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  email: 'email',
  password: 'password',
  appLanguage: 'appLanguage',
  learningLanguage: 'learningLanguage',
  learningLevel: 'learningLevel',
  theme: 'theme',
  avatar: 'avatar',
  createdby: 'createdby',
  createdat: 'createdat',
  updatedby: 'updatedby',
  updatedat: 'updatedat',
  status: 'status',
  lastentranceat: 'lastentranceat',
  lastexitat: 'lastexitat',
  lastloginat: 'lastloginat',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.UserpermissionScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  permissionid: 'permissionid',
  createdby: 'createdby',
  createdat: 'createdat',
  updatedby: 'updatedby',
  updatedat: 'updatedat'
};

exports.Prisma.UserroleScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  roleid: 'roleid',
  createdby: 'createdby',
  createdat: 'createdat',
  updatedby: 'updatedby',
  updatedat: 'updatedat'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.duration = exports.$Enums.duration = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  LIFETIME: 'LIFETIME'
};

exports.Currency = exports.$Enums.Currency = {
  USD: 'USD',
  EUR: 'EUR',
  TRY: 'TRY'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  packageFeature: 'packageFeature',
  packages: 'packages',
  price: 'price',
  subscription: 'subscription',
  chatRoom: 'chatRoom',
  chat: 'chat',
  learningProgress: 'learningProgress',
  languages: 'languages',
  entrance: 'entrance',
  apiclient: 'apiclient',
  refreshtoken: 'refreshtoken',
  revokedtoken: 'revokedtoken',
  role: 'role',
  notification: 'notification',
  permission: 'permission',
  rolepermission: 'rolepermission',
  user: 'user',
  userpermission: 'userpermission',
  userrole: 'userrole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
